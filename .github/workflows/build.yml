
# https://github.com/zmwangx/rust-ffmpeg/blob/master/.github/workflows/build.yml


name: build
on:
  push:
  # pull_request:
  # schedule:
  #   - cron: "0 0 * * *"

jobs:
  build-linux:
    name: Build Linux (cuda=${{matrix.cuda}})
    runs-on: ubuntu-latest
    container: jrottenberg/ffmpeg:7.1-ubuntu
    strategy:
      fail-fast: false
      matrix:
        cuda: [false, true]
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          apt update
          apt install -y --no-install-recommends clang curl pkg-config sudo gcc ca-certificates openssl libssl-dev cmake libc6-dev make
      - uses: Jimver/cuda-toolkit@master
        id: cuda-toolkit
        if: ${{ matrix.cuda }} == true
      - name: Set up CUDA
        if: ${{ matrix.cuda }} == true
        run: |
          echo "CUDA_PATH=${{ steps.cuda-toolkit.outputs.CUDA_PATH }}" >> $GITHUB_ENV
          echo "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/bin" >> $GITHUB_PATH
          echo "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/lib64" >> $GITHUB_LIBRARY_PATH
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt
          targets: x86_64-unknown-linux-gnu
      - name: Build
        run: |
          cargo build --verbose --release
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            target/release/purr*

  build-macos:
    name: Build macOS (metal)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          brew install ffmpeg pkg-config cmake
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          toolchain: stable
      - name: Build
        run: |
          cargo build --release --features metal
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            target/release/purr*


  build-windows:
    name: Build Windows (MSVC, cuda)
    runs-on: windows-2025
    env:
      FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
          Invoke-WebRequest "${env:FFMPEG_DOWNLOAD_URL}" -OutFile ffmpeg-release-full-shared.7z
          7z x ffmpeg-release-full-shared.7z
          mkdir ffmpeg
          mv ffmpeg-*/* ffmpeg/
          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          toolchain: stable
      - uses: ilammy/msvc-dev-cmd@v1.4.1
      - name: Install cuda & cmake
        run: |
          Install-Module -AcceptLicense -Name Microsoft.WinGet.Client -RequiredVersion 0.2.1 
          Install-WinGetPackage -Id Nvidia.CUDA
          Install-WinGetPackage -Id Kitware.CMake 
          Add-Content $env:GITHUB_ENV "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9`n"
      - name: Build
        run: |
          cargo build --release --features cuda
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            target/release/purr*
