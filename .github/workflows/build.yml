
# https://github.com/zmwangx/rust-ffmpeg/blob/master/.github/workflows/build.yml


name: build
on:
  push:
  # pull_request:
  # schedule:
  #   - cron: "0 0 * * *"

jobs:
  build-linux:
    name: Build Linux - ${{ matrix.cuda && 'cuda' || '' }}
    runs-on: ubuntu-latest
    container: jrottenberg/ffmpeg:7.1-ubuntu
    strategy:
      fail-fast: false
      matrix:
        cuda: [false, true]
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          apt update
          apt install -y --no-install-recommends clang curl pkg-config sudo gcc ca-certificates openssl libssl-dev cmake libc6-dev make wget
      - name: Install cuda
        if: matrix.cuda == true
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
          dpkg -i cuda-keyring_1.1-1_all.deb
          apt update
          apt install -y cuda-toolkit-12-9
          CUDA_PATH=/usr/local/cuda-12.9/
          echo "CUDA_PATH=$CUDA_PATH" >> $GITHUB_ENV
          echo "$CUDA_PATH/bin" >> $GITHUB_PATH
          echo "$CUDA_PATH/lib64" >> $GITHUB_LIBRARY_PATH
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt
          targets: x86_64-unknown-linux-gnu
      - name: Build
        run: cargo build --verbose --release ${{ matrix.cuda && ' --features cuda' || '' }}
        env:
          RUSTFLAGS: "-C link-arg=-Wl,--no-as-needed -C link-arg=-ldl"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            target/release/purr*

  build-macos:
    name: Build macOS (metal)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          brew install ffmpeg pkg-config cmake
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          toolchain: stable
      - name: Build
        run: |
          cargo build --release --features metal
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            target/release/purr*


  build-windows:
    name: Build Windows (MSVC, cuda)
    runs-on: windows-2025
    env:
      FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
          Invoke-WebRequest "${env:FFMPEG_DOWNLOAD_URL}" -OutFile ffmpeg-release-full-shared.7z
          7z x ffmpeg-release-full-shared.7z
          mkdir ffmpeg
          mv ffmpeg-*/* ffmpeg/
          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          toolchain: stable
      - uses: ilammy/msvc-dev-cmd@v1.4.1
      - name: Install Scoop
        uses: ScoopInstaller/GithubActions@main
        env:
          SKIP_UPDATED: '1'
          THROW_ERROR: '0'
      - name: Install cuda & cmake
        run: |
          scoop install -g cmake cuda
          # print env
          $GUESSED_CUDA_PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9"
          Write-Host "CUDA_PATH before: $env:CUDA_PATH"
          Write-Host "GUESSED_CUDA_PATH: $GUESSED_CUDA_PATH"
          # check if the directory exists
          if (Test-Path $GUESSED_CUDA_PATH) {
            Write-Host "GUESSED_CUDA_PATH exists, using it"
            Add-Content $env:GITHUB_ENV "CUDA_PATH=$GUESSED_CUDA_PATH`n"
          } else if ($env:CUDA_PATH) {
            Write-Host "CUDA_PATH exists, keeping it"
          } else {
            Write-Error "CUDA_PATH not found, exiting"
            exit 1
          }
      - name: Build
        run: |
          cargo build --release --features cuda
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            target/release/purr*
