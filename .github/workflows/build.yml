# https://github.com/zmwangx/rust-ffmpeg/blob/master/.github/workflows/build.yml

name: build
on:
  push:
  # pull_request:
  # schedule:
  #   - cron: "0 0 * * *"

jobs:
  build-linux:
    name: Build Linux${{ matrix.backend != 'none' && format(' - {0}', matrix.backend) || '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        backend: [none, cuda, vulkan]
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends clang curl pkg-config gcc ca-certificates openssl libssl-dev cmake libc6-dev make wget \
            libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev \
            llvm
      - name: Install cuda
        if: matrix.backend == 'cuda'
        run: |
          # Detect Ubuntu version and set appropriate CUDA repo
          UBUNTU_VERSION=$(lsb_release -rs | tr -d '.')
          if [ "$UBUNTU_VERSION" = "2204" ]; then
            CUDA_REPO="ubuntu2204"
            CUDA_VERSION="12-6"
            CUDA_PATH_VERSION="12.6"
          else
            CUDA_REPO="ubuntu2404"
            CUDA_VERSION="12-9"
            CUDA_PATH_VERSION="12.9"
          fi

          wget https://developer.download.nvidia.com/compute/cuda/repos/${CUDA_REPO}/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt update
          sudo apt install -y cuda-toolkit-${CUDA_VERSION}
          CUDA_PATH=/usr/local/cuda-${CUDA_PATH_VERSION}/
          echo "CUDA_PATH=$CUDA_PATH" >> $GITHUB_ENV
          echo "$CUDA_PATH/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$CUDA_PATH/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" >> $GITHUB_ENV
      - name: Install Vulkan SDK
        if: matrix.backend == 'vulkan'
        run: |
          # Install Vulkan SDK using system packages for Ubuntu 24.04
          sudo apt update
          sudo apt install -y libvulkan-dev vulkan-tools vulkan-utility-libraries-dev spirv-tools
          # Download and install latest Vulkan SDK manually
          VULKAN_SDK_VERSION="1.3.290.0"
          wget https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.xz
          tar -xf vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.xz
          export VULKAN_SDK="$(pwd)/${VULKAN_SDK_VERSION}/x86_64"
          echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
          echo "$VULKAN_SDK/bin" >> $GITHUB_PATH
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt
          targets: x86_64-unknown-linux-gnu
      - name: Build
        run: cargo build --verbose --release ${{ matrix.backend != 'none' && format(' --features {0}', matrix.backend) || '' }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: purr-linux${{ matrix.backend != 'none' && format('-{0}', matrix.backend) || '' }}
          path: |
            target/release/purr*

  build-macos:
    name: Build macOS (metal)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          brew install ffmpeg pkg-config cmake
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          toolchain: stable
      - name: Build
        run: |
          cargo build --release --features metal,coreml
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: purr-macos
          path: |
            target/release/purr*

  build-windows:
    defaults:
      run:
        shell: pwsh
    name: Build Windows${{ matrix.backend != 'none' && format(' - {0}', matrix.backend) || '' }}
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        backend: [none, cuda, vulkan]
    env:
      FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
          Invoke-WebRequest "${env:FFMPEG_DOWNLOAD_URL}" -OutFile ffmpeg-release-full-shared.7z
          7z x ffmpeg-release-full-shared.7z
          mkdir ffmpeg
          mv ffmpeg-*/* ffmpeg/
          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"
          choco install cmake
      - name: Install cuda
        if: matrix.backend == 'cuda'
        run: |
          $url = "https://developer.download.nvidia.com/compute/cuda/12.9.1/network_installers/cuda_12.9.1_windows_network.exe"
          Invoke-WebRequest -Uri $url -OutFile cuda_installer.exe
          Start-Process -Wait -FilePath .\cuda_installer.exe -ArgumentList "-s nvcc_12.9 cuda-compiler-12-9 cuda-libraries-12-9 cuda-libraries-dev-12-9"
          Add-Content $env:GITHUB_ENV "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9`n"
      - name: Install Vulkan SDK
        if: matrix.backend == 'vulkan'
        run: |
          $VulkanSDKVersion = "1.4.313.2"
          $VulkanSDKUrl = "https://sdk.lunarg.com/sdk/download/${VulkanSDKVersion}/windows/vulkansdk-windows-X64-${VulkanSDKVersion}.exe"
          Invoke-WebRequest -Uri ${VulkanSDKUrl} -OutFile VulkanSDK-Installer.exe
          Start-Process -Wait -FilePath .\VulkanSDK-Installer.exe -ArgumentList "--accept-licenses --default-answer --confirm-command install --root C:\VulkanSDK\${VulkanSDKVersion} --no-shortcuts --no-start-menu --no-desktop-icon --no-update-check"
          $env:VULKAN_SDK = "C:\VulkanSDK\${VulkanSDKVersion}"
          Add-Content $env:GITHUB_ENV "VULKAN_SDK=$env:VULKAN_SDK"
          Add-Content $env:GITHUB_PATH "$env:VULKAN_SDK\Bin"
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          toolchain: stable
      - name: Build
        run: |
          cargo build --release ${{ matrix.backend != 'none' && format('--features {0}', matrix.backend) || '' }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: purr-windows${{ matrix.backend != 'none' && format('-{0}', matrix.backend) || '' }}
          path: |
            target/release/purr*
